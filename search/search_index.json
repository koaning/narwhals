{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Narwhals","text":"<p>Extremely lightweight compatibility layer between Polars, pandas, and more.</p> <p>Seamlessly support both, without depending on either!</p> <ul> <li>\u2705 Just use a subset of the Polars API, no need to learn anything new</li> <li>\u2705 No dependencies (not even Polars), keep your library lightweight</li> <li>\u2705 Support both lazy and eager execution</li> <li>\u2705 Use Expressions</li> <li>\u2705 Tested against pandas and Polars nightly builds!</li> <li>\u2705 Preserve your Index (if present) without it getting in the way!</li> </ul>"},{"location":"#whos-this-for","title":"Who's this for?","text":"<p>Anyone wishing to write a library/application/service which consumes dataframes, and wishing to make it completely dataframe-agnostic.</p> <p>Let's get started!</p>"},{"location":"extending/","title":"List of supported libraries (and how to add yours!)","text":"<p>Currently, Narwhals supports the following libraries as inputs:</p> <ul> <li>pandas</li> <li>Polars</li> <li>cuDF</li> <li>Modin</li> </ul> <p>If you want your own library to be recognised too, you're welcome open a PR (with tests)! Alternatively, if you can't do that (for example, if you library is closed-source), see the next section for what else you can do.</p>"},{"location":"extending/#extending-narwhals","title":"Extending Narwhals","text":"<p>We love open source, but we're not \"open source absolutists\". If you're unable to open source you library, then this is how you can make your library compatible with Narwhals.</p> <p>Make sure that, in addition to the public Narwhals API, you also define:</p> <ul> <li><code>DataFrame.__narwhals_dataframe__</code>: return an object which implements public methods     from <code>Narwhals.DataFrame</code></li> <li><code>DataFrame.__narwhals_namespace__</code>: return an object which implements public top-level     functions from <code>narwhals</code> (e.g. <code>narwhals.col</code>, <code>narwhals.concat</code>, ...)</li> <li><code>LazyFrame.__narwhals_lazyframe__</code>: return an object which implements public methods     from <code>Narwhals.LazyFrame</code></li> <li><code>LazyFrame.__narwhals_namespace__</code>: return an object which implements public top-level     functions from <code>narwhals</code> (e.g. <code>narwhals.col</code>, <code>narwhals.concat</code>, ...)</li> <li><code>Series.__narwhals_series__</code>: return an object which implements public methods     from <code>Narwhals.Series</code></li> <li><code>Series.__narwhals_namespace__</code>: return an object which implements public top-level     functions from <code>narwhals</code> (e.g. <code>narwhals.col</code>, <code>narwhals.concat</code>, ...)</li> </ul> <p>If your library doesn't distinguish between lazy and eager, then it's OK for your dataframe   object to implement both <code>__narwhals_dataframe__</code> and <code>__narwhals_lazyframe__</code>. In fact,   that's currently what <code>narwhals._pandas_like.dataframe.PandasDataFrame</code> does. So, if you're stuck,   take a look at the source code to see how it's done!</p> <p>Note that the \"extension\" mechanism is still experimental. If anything is not clear, or doesn't work, please do raise an issue or contact us on Discord (see the link on the README).</p>"},{"location":"installation/","title":"Installation","text":"<p>First, make sure you have created and activated a Python3.8+ virtual environment.</p> <p>Then, run <pre><code>python -m pip install narwhals\n</code></pre></p> <p>Then, if you start the Python REPL and see the following: <pre><code>&gt;&gt;&gt; import narwhals\n&gt;&gt;&gt; narwhals\n'0.8.9'\n</code></pre> then installation worked correctly!</p>"},{"location":"quick_start/","title":"Quick start","text":""},{"location":"quick_start/#prerequisites","title":"Prerequisites","text":"<p>Please start by following the installation instructions.</p> <p>Then, please install the following:</p> <ul> <li>pandas</li> <li>Polars</li> </ul>"},{"location":"quick_start/#simple-example","title":"Simple example","text":"<p>Create a Python file <code>t.py</code> with the following content:</p> <pre><code>import pandas as pd\nimport polars as pl\nimport narwhals as nw\n\n\ndef my_function(df_any):\n    df = nw.from_native(df_any)\n    column_names = df.columns\n    return column_names\n\n\ndf_pandas = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\ndf_polars = pl.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n\nprint('pandas output')\nprint(my_function(df_pandas))\nprint('Polars output')\nprint(my_function(df_polars))\n</code></pre> <pre><code>pandas output\n['a', 'b']\nPolars output\n['a', 'b']\n</code></pre> <p>If you run <code>python t.py</code> then your output should look like the above. This is the simplest possible example of a dataframe-agnostic function - as we'll soon see, we can do much more advanced things. Let's learn about what you just did, and what Narwhals can do for you!</p> <p>Note: these examples are only using pandas and Polars. Please see the following to find the supported libriaries.</p>"},{"location":"related/","title":"Related projects","text":""},{"location":"related/#dataframe-interchange-protocol","title":"Dataframe Interchange Protocol","text":"<p>Standardised way of interchanging data between libraries, see here.</p>"},{"location":"related/#dataframe-api-standard","title":"DataFrame API Standard","text":"<p>Project which aims to \"provide a standard interface that encapsulates implementation details of dataframe libraries. This will allow users and third-party libraries to write code that interacts and operates with a standard dataframe, and not with specific implementations.\", see here.</p> <p>Some notable difference are:</p> <ul> <li>Narwhals just uses a subset of the Polars API, whereas the dataframe standard introduces a new API</li> <li>Narwhals supports expressions and separates lazy and eager execution</li> <li>Narwhals is a standalone, independent project, whereas the dataframe standard aims to be upstreamed   and implemented by major dataframe libraries.</li> </ul> <p>The projects are not in competition and have different goals.</p>"},{"location":"related/#ibis","title":"Ibis","text":"<p>Presents itself as a dataframe standard, and dispatches to 20+ backends. Some differences with Narwhals are:</p> <ul> <li>Narwhals is ~1000 times lighter</li> <li>Narwhals only supports 4 backends, Ibis more than 20</li> <li>Narwhals is limited to fundamental dataframe operations, Ibis includes more advanced and niche ones.</li> </ul> <p>Again, the projects are not in competition and have different goals.</p>"},{"location":"related/#array-api","title":"Array API","text":"<p>Array counterpart to the DataFrame API, see here.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Where do we go from here? What are the project's priorities? In no particular order:</p>"},{"location":"roadmap/#tests-and-docs-coverage","title":"Tests and docs coverage","text":"<p>Every method should have a good docstring with an example.</p> <p>CI should test across a variety of pandas and Polars versions. Currently we just test latest and minimum versions.</p>"},{"location":"roadmap/#api-coverage","title":"API coverage","text":"<p>Narwhals should be complete enough to be able to execute all 22 tpc-h queries. Currently, it can execute the first 7.</p>"},{"location":"roadmap/#other-backends","title":"Other backends?","text":"<p>Narwhals is extesible - can we make it as easy as possible for backends to become compatible with it?</p>"},{"location":"roadmap/#query-optimisation","title":"Query optimisation","text":"<p>Can we insert a light layer to do some simple query optimisation for pandas?</p>"},{"location":"roadmap/#use-cases","title":"Use cases","text":"<p>We're currently investigating whether we can make scikit-lego dataframe-agnostic.</p> <p>Ideas for other projects we could support? If so, please post them here.</p>"},{"location":"why/","title":"Why?","text":"<p>You may think that pandas, Polars, and all dataframe libraries are quite similar. But are they really?</p> <p>For example, do the following produce the same output?</p> <pre><code>import pandas as pd\nimport polars as pl\n\nprint(3 in pd.Series([1, 2, 3]))\nprint(3 in pl.Series([1, 2, 3]))\n</code></pre> <p>Try it out and see ;) Spoiler alert: they don't. pandas checks if <code>3</code> is in the index, Polars checks if it's in the values.</p> <p>How about <pre><code>df_left = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\ndf_right = pd.DataFrame({'a': [1, 2, 3], 'c': [4, 5, 6]})\ndf_left.merge(df_right, left_on='b', right_on='c', how='left')\n</code></pre> versus</p> <pre><code>df_left = pl.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\ndf_right = pl.DataFrame({'a': [1, 2, 3], 'c': [4, 5, 6]})\ndf_left.join(df_right, left_on='b', right_on='c', how='left')\n</code></pre> <p>?</p> <p>There are several such subtle difference between the libraries. Writing dataframe-agnostic code is hard! But by having a unified, simple, and predictable API, you can focus on behaviour rather than on subtle implementation differences.</p> <p>Furthermore, both pandas and Polars frequently deprecate behaviour. Narwhals handles this for you by testing against nightly builds of both libraries and handling backwards compatibility internally  (so you don't have to!).</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>Anything documented in the API reference is intended to work consistently among supported backends.</p> <p>For example: <pre><code>import narwhals as nw\n\ndf.with_columns(\n    a_mean = nw.col('a').mean(),\n    a_std = nw.col('a').std(),\n)\n</code></pre> is supported, as <code>DataFrame.with_columns</code>, <code>narwhals.col</code>, <code>Expr.mean</code>, and <code>Expr.std</code> are all documented in the API reference.</p> <p>However, <pre><code>import narwhals as nw\n\ndf.with_columns(\n    a_ewm_mean = nw.col('a').ewm_mean(alpha=.7),\n)\n</code></pre> is not - <code>Expr.ewm_mean</code> only appears in the Polars API reference, but not in the Narwhals one.</p> <p>In general, you should expect any fundamental dataframe operation to be supported - if one that you need is not, please do open a feature request!</p>"},{"location":"api-reference/dataframe/","title":"<code>narwhals.DataFrame</code>","text":"<p>Two-dimensional data structure representing data as a table with rows and columns.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>Any</code> <p>A pandas-like dataframe (Pandas, cuDF or Modin), a Polars dataframe,  a narwhals DataFrame or a narwhals LazyFrame.</p> required <code>is_polars</code> <code>bool</code> <p>if set to <code>True</code>, assume the dataframe to be of Polars type.</p> <code>False</code> <p>Examples:</p> <p>Constructing a DataFrame from a dictionary:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {\"a\": [1, 2], \"b\": [3, 4]}\n&gt;&gt;&gt; df_pl = pl.DataFrame(data)\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(df)\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 3   \u2502\n\u2502 2   \u2506 4   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.columns","title":"<code>columns: list[str]</code>  <code>property</code>","text":"<p>Get column names.</p> <p>Examples:</p> <p>Get column names.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df.columns\n['foo', 'bar', 'ham']\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.schema","title":"<code>schema: dict[str, DType]</code>  <code>property</code>","text":"<p>Get a dict[column name, DataType].</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df.schema\nOrderedDict({'foo': Int64, 'bar': Float64, 'ham': String})\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.shape","title":"<code>shape: tuple[int, int]</code>  <code>property</code>","text":"<p>Get the shape of the DataFrame.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame({\"foo\": [1, 2, 3, 4, 5]})\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df.shape\n(5, 1)\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.drop","title":"<code>drop(*columns)</code>","text":"<p>Remove columns from the dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>*columns</code> <code>str | Iterable[str]</code> <p>Names of the columns that should be removed from the dataframe.</p> <code>()</code> <p>Examples:</p> <p>Drop a single column by passing the name of that column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; dframe = df.drop(\"ham\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6.0 \u2502\n\u2502 2   \u2506 7.0 \u2502\n\u2502 3   \u2506 8.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Drop multiple columns by passing a list of column names.</p> <pre><code>&gt;&gt;&gt; dframe = df.drop([\"bar\", \"ham\"])\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 2   \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Use positional arguments to drop multiple columns.</p> <pre><code>&gt;&gt;&gt; dframe = df.drop(\"foo\", \"ham\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar \u2502\n\u2502 --- \u2502\n\u2502 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6.0 \u2502\n\u2502 7.0 \u2502\n\u2502 8.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.drop_nulls","title":"<code>drop_nulls()</code>","text":"<p>Drop null values.</p> Notes <p>pandas and Polars handle null values differently. Polars distinguishes between NaN and Null, whereas pandas doesn't.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {'a': [1., 2., None], 'ba': [1, None, 2.]}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.DataFrame(data)\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.drop_nulls()\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n     a   ba\n0  1.0  1.0\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 ba  \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 f64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0 \u2506 1.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.filter","title":"<code>filter(*predicates)</code>","text":"<p>Filter the rows in the DataFrame based on one or more predicate expressions.</p> <p>The original order of the remaining rows is preserved.</p> <p>Parameters:</p> Name Type Description Default <code>predicates</code> <code>IntoExpr | Iterable[IntoExpr]</code> <p>Expression(s) that evaluates to a boolean Series.</p> <code>()</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Filter on one condition:</p> <pre><code>&gt;&gt;&gt; dframe = df.filter(nw.col(\"foo\") &gt; 1)\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2   \u2506 7   \u2506 b   \u2502\n\u2502 3   \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Filter on multiple conditions, combined with and/or operators:</p> <pre><code>&gt;&gt;&gt; dframe = df.filter((nw.col(\"foo\") &lt; 3) &amp; (nw.col(\"ham\") == \"a\"))\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <pre><code>&gt;&gt;&gt; dframe = df.filter((nw.col(\"foo\") == 1) | (nw.col(\"ham\") == \"c\"))\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2502 3   \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Provide multiple filters using <code>*args</code> syntax:</p> <pre><code>&gt;&gt;&gt; dframe = df.filter(\n...     nw.col(\"foo\") &lt;= 2,\n...     ~nw.col(\"ham\").is_in([\"b\", \"c\"]),\n... )\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.group_by","title":"<code>group_by(*keys)</code>","text":"<p>Start a group by operation.</p> <p>Parameters:</p> Name Type Description Default <code>*keys</code> <code>str | Iterable[str]</code> <p>Column(s) to group by. Accepts multiple columns names as a list.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>GroupBy</code> <code>GroupBy</code> <p>Object which can be used to perform aggregations.</p> <p>Examples:</p> <p>Group by one column and call <code>agg</code> to compute the grouped sum of another  column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"a\": [\"a\", \"b\", \"a\", \"b\", \"c\"],\n...         \"b\": [1, 2, 1, 3, 3],\n...         \"c\": [5, 4, 3, 2, 1],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; dframe = df.group_by(\"a\").agg(nw.col(\"b\").sum()).sort(\"a\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 2   \u2502\n\u2502 b   \u2506 5   \u2502\n\u2502 c   \u2506 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Group by multiple columns by passing a list of column names.</p> <pre><code>&gt;&gt;&gt; dframe = df.group_by([\"a\", \"b\"]).agg(nw.max(\"c\")).sort(\"a\", \"b\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 c   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 b   \u2506 2   \u2506 4   \u2502\n\u2502 b   \u2506 3   \u2506 2   \u2502\n\u2502 c   \u2506 3   \u2506 1   \u2502\n\u2502 a   \u2506 1   \u2506 5   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.head","title":"<code>head(n)</code>","text":"<p>Get the first <code>n</code> rows.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of rows to return. If a negative value is passed, return all rows except the last <code>abs(n)</code>.</p> required <p>Examples:</p> <p>Get column names.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3, 4, 5],\n...         \"bar\": [6, 7, 8, 9, 10],\n...         \"ham\": [\"a\", \"b\", \"c\", \"d\", \"e\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; dframe = df.head(3)\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2502 2   \u2506 7   \u2506 b   \u2502\n\u2502 3   \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Pass a negative value to get all rows <code>except</code> the last <code>abs(n)</code>.</p> <pre><code>&gt;&gt;&gt; dframe = df.head(-3)\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2502 2   \u2506 7   \u2506 b   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.join","title":"<code>join(other, *, how='inner', left_on, right_on)</code>","text":"<p>Join in SQL-like fashion.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>DataFrame to join with.</p> required <code>how</code> <code>Literal['inner']</code> <p>{'inner'}   Join strategy.</p> <ul> <li>inner: Returns rows that have matching values in both               tables</li> </ul> <code>'inner'</code> <code>left_on</code> <code>str | list[str]</code> <p>Name(s) of the left join column(s).</p> required <code>right_on</code> <code>str | list[str]</code> <p>Name(s) of the right join column(s).</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new joined DataFrame</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; other_df_pl = pl.DataFrame(\n...     {\n...         \"apple\": [\"x\", \"y\", \"z\"],\n...         \"ham\": [\"a\", \"b\", \"d\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; other_df = nw.DataFrame(other_df_pl)\n&gt;&gt;&gt; dframe = df.join(other_df, left_on=\"ham\", right_on=\"ham\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (2, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2506 apple \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n\u2502 i64 \u2506 f64 \u2506 str \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6.0 \u2506 a   \u2506 x     \u2502\n\u2502 2   \u2506 7.0 \u2506 b   \u2506 y     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.pipe","title":"<code>pipe(function, *args, **kwargs)</code>","text":"<p>Pipe function call.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {'a': [1,2,3], 'ba': [4,5,6]}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.DataFrame(data)\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.pipe(lambda _df: _df.select([x for x in _df.columns if len(x) == 1]))\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a\n0  1\n1  2\n2  3\n&gt;&gt;&gt; func(df_pl)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 2   \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.rename","title":"<code>rename(mapping)</code>","text":"<p>Rename column names.</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[str, str]</code> <p>Key value pairs that map from old name to new name.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\"foo\": [1, 2, 3], \"bar\": [6, 7, 8], \"ham\": [\"a\", \"b\", \"c\"]}\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; dframe = df.rename({\"foo\": \"apple\"})\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 apple \u2506 bar \u2506 ham \u2502\n\u2502 ---   \u2506 --- \u2506 --- \u2502\n\u2502 i64   \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1     \u2506 6   \u2506 a   \u2502\n\u2502 2     \u2506 7   \u2506 b   \u2502\n\u2502 3     \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.select","title":"<code>select(*exprs, **named_exprs)</code>","text":"<p>Select columns from this DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>*exprs</code> <code>IntoExpr | Iterable[IntoExpr]</code> <p>Column(s) to select, specified as positional arguments.      Accepts expression input. Strings are parsed as column names,      other non-expression inputs are parsed as literals.</p> <code>()</code> <code>**named_exprs</code> <code>IntoExpr</code> <p>Additional columns to select, specified as keyword arguments.             The columns will be renamed to the keyword used.</p> <code>{}</code> <p>Examples:</p> <p>Pass the name of a column to select that column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; dframe = df.select(\"foo\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 2   \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Multiple columns can be selected by passing a list of column names.</p> <pre><code>&gt;&gt;&gt; dframe = df.select([\"foo\", \"bar\"])\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2502\n\u2502 2   \u2506 7   \u2502\n\u2502 3   \u2506 8   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Multiple columns can also be selected using positional arguments instead of a list. Expressions are also accepted.</p> <pre><code>&gt;&gt;&gt; dframe = df.select(nw.col(\"foo\"), nw.col(\"bar\") + 1)\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 7   \u2502\n\u2502 2   \u2506 8   \u2502\n\u2502 3   \u2506 9   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Use keyword arguments to easily name your expression inputs.</p> <pre><code>&gt;&gt;&gt; dframe = df.select(threshold=nw.col('foo')*2)\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 threshold \u2502\n\u2502 ---       \u2502\n\u2502 i64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2         \u2502\n\u2502 4         \u2502\n\u2502 6         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.sort","title":"<code>sort(by, *more_by, descending=False)</code>","text":"<p>Sort the dataframe by the given columns.</p> <p>Parameters:</p> Name Type Description Default <code>by</code> <code>str | Iterable[str]</code> <p>Column(s) names to sort by.</p> required <code>*more_by</code> <code>str</code> <p>Additional columns to sort by, specified as positional        arguments.</p> <code>()</code> <code>descending</code> <code>bool | Sequence[bool]</code> <p>Sort in descending order. When sorting by multiple          columns, can be specified per column by passing a          sequence of booleans.</p> <code>False</code> <p>Examples:</p> <p>Pass a single column name to sort by that column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"a\": [1, 2, None],\n...         \"b\": [6.0, 5.0, 4.0],\n...         \"c\": [\"a\", \"c\", \"b\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; dframe = df.sort(\"a\")\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 f64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null \u2506 4.0 \u2506 b   \u2502\n\u2502 1    \u2506 6.0 \u2506 a   \u2502\n\u2502 2    \u2506 5.0 \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Sort by multiple columns by passing a list of columns.</p> <pre><code>&gt;&gt;&gt; dframe = df.sort([\"c\", \"a\"], descending=True)\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 f64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2    \u2506 5.0 \u2506 c   \u2502\n\u2502 null \u2506 4.0 \u2506 b   \u2502\n\u2502 1    \u2506 6.0 \u2506 a   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Or use positional arguments to sort by multiple columns in the same way.</p> <pre><code>&gt;&gt;&gt; dframe = df.sort(\"c\", \"a\", descending=[False, True])\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 f64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0 \u2506 a   \u2502\n\u2502 null \u2506 4.0 \u2506 b   \u2502\n\u2502 2    \u2506 5.0 \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.to_dict","title":"<code>to_dict(*, as_series=True)</code>","text":"<p>Convert DataFrame to a dictionary mapping column name to values.</p> <p>Parameters:</p> Name Type Description Default <code>as_series</code> <code>bool</code> <p>If set to true <code>True</code> values are Series, otherwise         values are Any.</p> <code>True</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"A\": [1, 2, 3, 4, 5],\n...         \"fruits\": [\"banana\", \"banana\", \"apple\", \"apple\", \"banana\"],\n...         \"B\": [5, 4, 3, 2, 1],\n...         \"cars\": [\"beetle\", \"audi\", \"beetle\", \"beetle\", \"beetle\"],\n...         \"optional\": [28, 300, None, 2, -30],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(df)\nshape: (5, 5)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 A   \u2506 fruits \u2506 B   \u2506 cars   \u2506 optional \u2502\n\u2502 --- \u2506 ---    \u2506 --- \u2506 ---    \u2506 ---      \u2502\n\u2502 i64 \u2506 str    \u2506 i64 \u2506 str    \u2506 i64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 banana \u2506 5   \u2506 beetle \u2506 28       \u2502\n\u2502 2   \u2506 banana \u2506 4   \u2506 audi   \u2506 300      \u2502\n\u2502 3   \u2506 apple  \u2506 3   \u2506 beetle \u2506 null     \u2502\n\u2502 4   \u2506 apple  \u2506 2   \u2506 beetle \u2506 2        \u2502\n\u2502 5   \u2506 banana \u2506 1   \u2506 beetle \u2506 -30      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df.to_dict(as_series=False)\n{'A': [1, 2, 3, 4, 5], 'fruits': ['banana', 'banana', 'apple', 'apple', 'banana'], 'B': [5, 4, 3, 2, 1], 'cars': ['beetle', 'audi', 'beetle', 'beetle', 'beetle'], 'optional': [28, 300, None, 2, -30]}\n&gt;&gt;&gt; df.to_dict(as_series=True)\n{'A': shape: (5,)\nSeries: 'A' [i64]\n[\n    1\n    2\n    3\n    4\n    5\n], 'fruits': shape: (5,)\nSeries: 'fruits' [str]\n[\n    \"banana\"\n    \"banana\"\n    \"apple\"\n    \"apple\"\n    \"banana\"\n], 'B': shape: (5,)\nSeries: 'B' [i64]\n[\n    5\n    4\n    3\n    2\n    1\n], 'cars': shape: (5,)\nSeries: 'cars' [str]\n[\n    \"beetle\"\n    \"audi\"\n    \"beetle\"\n    \"beetle\"\n    \"beetle\"\n], 'optional': shape: (5,)\nSeries: 'optional' [i64]\n[\n    28\n    300\n    null\n    2\n    -30\n]}\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.to_numpy","title":"<code>to_numpy()</code>","text":"<p>Convert this DataFrame to a NumPy ndarray.</p> <p>Returns:</p> Type Description <code>Any</code> <p>A NumPy ndarray.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.5, 7.0, 8.5],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     },\n...     schema_overrides={\"foo\": pl.UInt8, \"bar\": pl.Float32},\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Export to a standard 2D numpy array.</p> <pre><code>&gt;&gt;&gt; df.to_numpy()\narray([[1, 6.5, 'a'],\n       [2, 7.0, 'b'],\n       [3, 8.5, 'c']], dtype=object)\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.to_pandas","title":"<code>to_pandas()</code>","text":"<p>Convert this DataFrame to a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>Any</code> <p>A pandas DataFrame.</p> Notes <p>This operation requires that <code>pandas</code> is installed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df.to_pandas()\n   foo  bar ham\n0    1  6.0   a\n1    2  7.0   b\n2    3  8.0   c\n</code></pre> <p>Null values in numeric columns are converted to <code>NaN</code>.</p> <pre><code>&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, None],\n...         \"bar\": [6.0, None, 8.0],\n...         \"ham\": [None, \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df.to_pandas()\n   foo  bar   ham\n0  1.0  6.0  None\n1  2.0  NaN     b\n2  NaN  8.0     c\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.unique","title":"<code>unique(subset)</code>","text":"<p>Drop duplicate rows from this dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>subset</code> <code>str | list[str]</code> <p>Column name(s) to consider when identifying duplicate rows.</p> required <p>Returns:</p> Name Type Description <code>DataFrame</code> <code>Self</code> <p>DataFrame with unique rows.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"foo\": [1, 2, 3, 1],\n...         \"bar\": [\"a\", \"a\", \"a\", \"a\"],\n...         \"ham\": [\"b\", \"b\", \"b\", \"b\"],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; dframe = df.unique([\"bar\", \"ham\"])\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 str \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 a   \u2506 b   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; dframe = df.unique(\"foo\").sort(\"foo\")\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 str \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 a   \u2506 b   \u2502\n\u2502 2   \u2506 a   \u2506 b   \u2502\n\u2502 3   \u2506 a   \u2506 b   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dataframe/#narwhals.dataframe.DataFrame.with_columns","title":"<code>with_columns(*exprs, **named_exprs)</code>","text":"<p>Add columns to this DataFrame.</p> <p>Added columns will replace existing columns with the same name.</p> <p>Parameters:</p> Name Type Description Default <code>*exprs</code> <code>IntoExpr | Iterable[IntoExpr]</code> <p>Column(s) to add, specified as positional arguments.      Accepts expression input. Strings are parsed as column names, other      non-expression inputs are parsed as literals.</p> <code>()</code> <code>**named_exprs</code> <code>IntoExpr</code> <p>Additional columns to add, specified as keyword arguments.             The columns will be renamed to the keyword used.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>DataFrame</code> <code>Self</code> <p>A new DataFrame with the columns added.</p> Note <p>Creating a new DataFrame using this method does not create a new copy of existing data.</p> <p>Examples:</p> <p>Pass an expression to add it as a new column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...     {\n...         \"a\": [1, 2, 3, 4],\n...         \"b\": [0.5, 4, 10, 13],\n...         \"c\": [True, True, False, True],\n...     }\n... )\n&gt;&gt;&gt; df = nw.DataFrame(df_pl)\n&gt;&gt;&gt; dframe = df.with_columns((nw.col(\"a\") * 2).alias(\"a*2\"))\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b    \u2506 c     \u2506 a*2 \u2502\n\u2502 --- \u2506 ---  \u2506 ---   \u2506 --- \u2502\n\u2502 i64 \u2506 f64  \u2506 bool  \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 0.5  \u2506 true  \u2506 2   \u2502\n\u2502 2   \u2506 4.0  \u2506 true  \u2506 4   \u2502\n\u2502 3   \u2506 10.0 \u2506 false \u2506 6   \u2502\n\u2502 4   \u2506 13.0 \u2506 true  \u2506 8   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/dependencies/","title":"<code>narwhals.dependencies</code>","text":""},{"location":"api-reference/dependencies/#narwhals.dependencies.get_pandas","title":"<code>get_pandas()</code>","text":"<p>Import pandas (if available - else return None).</p>"},{"location":"api-reference/dependencies/#narwhals.dependencies.get_polars","title":"<code>get_polars()</code>","text":"<p>Import Polars (if available - else return None).</p>"},{"location":"api-reference/dependencies/#narwhals.dependencies.get_modin","title":"<code>get_modin()</code>","text":""},{"location":"api-reference/dependencies/#narwhals.dependencies.get_cudf","title":"<code>get_cudf()</code>","text":""},{"location":"api-reference/dependencies/#narwhals.dependencies.get_pyarrow","title":"<code>get_pyarrow()</code>","text":""},{"location":"api-reference/dtypes/","title":"<code>narwhals.dtypes</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Int64","title":"<code>Int64</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Int32","title":"<code>Int32</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Int16","title":"<code>Int16</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Int8","title":"<code>Int8</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.UInt64","title":"<code>UInt64</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.UInt32","title":"<code>UInt32</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.UInt16","title":"<code>UInt16</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.UInt8","title":"<code>UInt8</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Float64","title":"<code>Float64</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Float32","title":"<code>Float32</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Boolean","title":"<code>Boolean</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.String","title":"<code>String</code>","text":""},{"location":"api-reference/dtypes/#narwhals.dtypes.Datetime","title":"<code>Datetime</code>","text":""},{"location":"api-reference/expressions/","title":"<code>narwhals.Expr</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.alias","title":"<code>alias(name)</code>","text":"<p>Rename the expression.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The new name.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 2], 'b': [4, 5]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 2], 'b': [4, 5]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select((nw.col('b')+10).alias('c'))\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n    c\n0  14\n1  15\n&gt;&gt;&gt; func(df_pl)\nshape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 c   \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 14  \u2502\n\u2502 15  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.all","title":"<code>all()</code>","text":"<p>Return whether all values in the column are <code>True</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [True, False], 'b': [True, True]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [True, False], 'b': [True, True]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select(nw.col('a', 'b').all())\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n       a     b\n0  False  True\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a     \u2506 b    \u2502\n\u2502 ---   \u2506 ---  \u2502\n\u2502 bool  \u2506 bool \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 false \u2506 true \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.any","title":"<code>any()</code>","text":"<p>Return whether any of the values in the column are <code>True</code></p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [True, False], 'b': [True, True]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [True, False], 'b': [True, True]})\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select(nw.col('a', 'b').any())\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n      a     b\n0  True  True\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b    \u2502\n\u2502 ---  \u2506 ---  \u2502\n\u2502 bool \u2506 bool \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 true \u2506 true \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.cast","title":"<code>cast(dtype)</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.cum_sum","title":"<code>cum_sum()</code>","text":"<p>Return cumulative sum.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 1, 3, 5, 5], 'b': [2, 4, 4, 6, 6]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 1, 3, 5, 5], 'b': [2, 4, 4, 6, 6]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(nw.col('a', 'b').cum_sum())\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n    a   b\n0   1   2\n1   2   6\n2   5  10\n3  10  16\n4  15  22\n&gt;&gt;&gt; func(df_pl)\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 2   \u2502\n\u2502 2   \u2506 6   \u2502\n\u2502 5   \u2506 10  \u2502\n\u2502 10  \u2506 16  \u2502\n\u2502 15  \u2506 22  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.diff","title":"<code>diff()</code>","text":"<p>Returns the difference between each element and the previous one.</p> Notes <p>pandas may change the dtype here, for example when introducing missing values in an integer column. To ensure, that the dtype doesn't change, you may want to use <code>fill_null</code> and <code>cast</code>. For example, to calculate the diff and fill missing values with <code>0</code> in a Int64 column, you could do:</p> <pre><code>nw.col('a').diff().fill_null(0).cast(nw.Int64)\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 1, 3, 5, 5]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 1, 3, 5, 5]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(a_diff=nw.col('a').diff())\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a_diff\n0     NaN\n1     0.0\n2     2.0\n3     2.0\n4     0.0\n&gt;&gt;&gt; func(df_pl)\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a_diff \u2502\n\u2502 ---    \u2502\n\u2502 i64    \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null   \u2502\n\u2502 0      \u2502\n\u2502 2      \u2502\n\u2502 2      \u2502\n\u2502 0      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.drop_nulls","title":"<code>drop_nulls()</code>","text":"<p>Remove missing values.</p> Notes <p>pandas and Polars handle null values differently. Polars distinguishes between NaN and Null, whereas pandas doesn't.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n</code></pre> <pre><code>&gt;&gt;&gt; df_pd = pd.DataFrame({\"a\": [2.0, 4.0, float(\"nan\"), 3.0, None, 5.0]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({\"a\": [2.0, 4.0, float(\"nan\"), 3.0, None, 5.0]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select(nw.col(\"a\").drop_nulls())\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n     a\n0  2.0\n1  4.0\n3  3.0\n5  5.0\n&gt;&gt;&gt; func(df_pl)  # nan != null for polars\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2.0 \u2502\n\u2502 4.0 \u2502\n\u2502 NaN \u2502\n\u2502 3.0 \u2502\n\u2502 5.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.fill_null","title":"<code>fill_null(value)</code>","text":"<p>Fill null values with given value.</p> Notes <p>pandas and Polars handle null values differently. Polars distinguishes between NaN and Null, whereas pandas doesn't.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame(\n...         {\n...             'a': [2, 4, None, 3, 5],\n...             'b': [2.0, 4.0, float(\"nan\"), 3.0, 5.0]\n...         }\n... )\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...         {\n...             'a': [2, 4, None, 3, 5],\n...             'b': [2.0, 4.0, float(\"nan\"), 3.0, 5.0]\n...         }\n... )\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.with_columns(nw.col('a', 'b').fill_null(0))\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n     a    b\n0  2.0  2.0\n1  4.0  4.0\n2  0.0  0.0\n3  3.0  3.0\n4  5.0  5.0\n</code></pre> <pre><code>&gt;&gt;&gt; func(df_pl)  # nan != null for polars\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2   \u2506 2.0 \u2502\n\u2502 4   \u2506 4.0 \u2502\n\u2502 0   \u2506 NaN \u2502\n\u2502 3   \u2506 3.0 \u2502\n\u2502 5   \u2506 5.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.filter","title":"<code>filter(other)</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.is_between","title":"<code>is_between(lower_bound, upper_bound, closed='both')</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.is_in","title":"<code>is_in(other)</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.is_null","title":"<code>is_null()</code>","text":"<p>Returns a boolean Series indicating which values are null.</p> Notes <p>pandas and Polars handle null values differently. Polars distinguishes between NaN and Null, whereas pandas doesn't.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame(\n...         {\n...             'a': [2, 4, None, 3, 5],\n...             'b': [2.0, 4.0, float(\"nan\"), 3.0, 5.0]\n...         }\n... )\n&gt;&gt;&gt; df_pl = pl.DataFrame(\n...         {\n...             'a': [2, 4, None, 3, 5],\n...             'b': [2.0, 4.0, float(\"nan\"), 3.0, 5.0]\n...         }\n... )\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.with_columns(\n...         a_is_null = nw.col('a').is_null(),\n...         b_is_null = nw.col('b').is_null()\n...     )\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n     a    b  a_is_null  b_is_null\n0  2.0  2.0      False      False\n1  4.0  4.0      False      False\n2  NaN  NaN       True       True\n3  3.0  3.0      False      False\n4  5.0  5.0      False      False\n</code></pre> <pre><code>&gt;&gt;&gt; func(df_pl)  # nan != null for polars\nshape: (5, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 a_is_null \u2506 b_is_null \u2502\n\u2502 ---  \u2506 --- \u2506 ---       \u2506 ---       \u2502\n\u2502 i64  \u2506 f64 \u2506 bool      \u2506 bool      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2    \u2506 2.0 \u2506 false     \u2506 false     \u2502\n\u2502 4    \u2506 4.0 \u2506 false     \u2506 false     \u2502\n\u2502 null \u2506 NaN \u2506 true      \u2506 false     \u2502\n\u2502 3    \u2506 3.0 \u2506 false     \u2506 false     \u2502\n\u2502 5    \u2506 5.0 \u2506 false     \u2506 false     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.max","title":"<code>max()</code>","text":"<p>Returns the maximum value(s) from a column(s).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [10, 20], 'b': [50, 100]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [10, 20], 'b': [50, 100]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(nw.max('a', 'b'))\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n    a    b\n0  20  100\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 20  \u2506 100 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.mean","title":"<code>mean()</code>","text":"<p>Get mean value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [-1, 0, 1], 'b': [2, 4, 6]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [-1, 0, 1], 'b': [2, 4, 6]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(nw.col('a', 'b').mean())\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n     a    b\n0  0.0  4.0\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 f64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 0.0 \u2506 4.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.min","title":"<code>min()</code>","text":"<p>Returns the minimum value(s) from a column(s).</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 2], 'b': [4, 3]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 2], 'b': [4, 3]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select(nw.min('a','b'))\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a  b\n0  1  3\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.n_unique","title":"<code>n_unique()</code>","text":"<p>Returns count of unique values</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 2, 3, 4, 5], 'b': [1, 1, 3, 3, 5]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 2, 3, 4, 5], 'b': [1, 1, 3, 3, 5]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(nw.col('a', 'b').n_unique())\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a  b\n0  5  3\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 u32 \u2506 u32 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 5   \u2506 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.over","title":"<code>over(*keys)</code>","text":"<p>Compute expressions over the given groups.</p> <p>Parameters:</p> Name Type Description Default <code>keys</code> <code>str | Iterable[str]</code> <p>Names of columns to compute window expression over.   Must be names of columns, as opposed to expressions -   so, this is a bit less flexible than Polars' <code>Expr.over</code>.</p> <code>()</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; data = {'a': [1, 2, 3], 'b': [1, 1, 2]}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.DataFrame(data)\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.with_columns(\n...         a_min_per_group = nw.col('a').min().over('b')\n...     )\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a  b  a_min_per_group\n0  1  1                1\n1  2  1                1\n2  3  2                3\n&gt;&gt;&gt; func(df_pl)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 a_min_per_group \u2502\n\u2502 --- \u2506 --- \u2506 ---             \u2502\n\u2502 i64 \u2506 i64 \u2506 i64             \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 1   \u2506 1               \u2502\n\u2502 2   \u2506 1   \u2506 1               \u2502\n\u2502 3   \u2506 2   \u2506 3               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.unique","title":"<code>unique()</code>","text":"<p>Return unique values</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 1, 3, 5, 5], 'b': [2, 4, 4, 6, 6]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 1, 3, 5, 5], 'b': [2, 4, 4, 6, 6]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(nw.col('a', 'b').unique())\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a  b\n0  1  2\n1  3  4\n2  5  6\n&gt;&gt;&gt; func(df_pl)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 2   \u2502\n\u2502 3   \u2506 4   \u2502\n\u2502 5   \u2506 6   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.sample","title":"<code>sample(n=None, fraction=None, *, with_replacement=False)</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.shift","title":"<code>shift(n)</code>","text":"<p>Shift values by <code>n</code> positions.</p> Notes <p>pandas may change the dtype here, for example when introducing missing values in an integer column. To ensure, that the dtype doesn't change, you may want to use <code>fill_null</code> and <code>cast</code>. For example, to shift and fill missing values with <code>0</code> in a Int64 column, you could do:</p> <pre><code>nw.col('a').shift(1).fill_null(0).cast(nw.Int64)\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [1, 1, 3, 5, 5]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [1, 1, 3, 5, 5]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(a_shift=nw.col('a').shift(n=1))\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a_shift\n0      NaN\n1      1.0\n2      1.0\n3      3.0\n4      5.0\n&gt;&gt;&gt; func(df_pl)\nshape: (5, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a_shift \u2502\n\u2502 ---     \u2502\n\u2502 i64     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null    \u2502\n\u2502 1       \u2502\n\u2502 1       \u2502\n\u2502 3       \u2502\n\u2502 5       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.sort","title":"<code>sort(*, descending=False)</code>","text":""},{"location":"api-reference/expressions/#narwhals.Expr.std","title":"<code>std(*, ddof=1)</code>","text":"<p>Get standard deviation.</p> <p>Parameters:</p> Name Type Description Default <code>ddof</code> <code>int</code> <p>\u201cDelta Degrees of Freedom\u201d: the divisor used in the calculation is N - ddof,      where N represents the number of elements. By default ddof is 1.</p> <code>1</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [20, 25, 60], 'b': [1.5, 1, -1.4]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [20, 25, 60], 'b': [1.5, 1, -1.4]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...    df = nw.from_native(df_any)\n...    df = df.select(nw.col('a', 'b').std(ddof=0))\n...    return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n          a         b\n0  17.79513  1.265789\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a        \u2506 b        \u2502\n\u2502 ---      \u2506 ---      \u2502\n\u2502 f64      \u2506 f64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 17.79513 \u2506 1.265789 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions/#narwhals.Expr.sum","title":"<code>sum()</code>","text":"<p>Return the sum value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': [5, 10], 'b': [50, 100]})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': [5, 10], 'b': [50, 100]})\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select(nw.col('a', 'b').sum())\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n    a    b\n0  15  150\n&gt;&gt;&gt; func(df_pl)\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 15  \u2506 150 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions_dt/","title":"<code>narwhals.Expr.dt</code>","text":""},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.year","title":"<code>year()</code>","text":""},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.month","title":"<code>month()</code>","text":""},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.day","title":"<code>day()</code>","text":""},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.ordinal_day","title":"<code>ordinal_day()</code>","text":"<p>Get ordinal day.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {'a': [datetime(2020, 1, 1), datetime(2020, 8, 3)]}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.DataFrame(data)\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.with_columns(a_ordinal_day=nw.col('a').dt.ordinal_day())\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n           a  a_ordinal_day\n0 2020-01-01              1\n1 2020-08-03            216\n&gt;&gt;&gt; func(df_pl)\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a                   \u2506 a_ordinal_day \u2502\n\u2502 ---                 \u2506 ---           \u2502\n\u2502 datetime[\u03bcs]        \u2506 i16           \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 00:00:00 \u2506 1             \u2502\n\u2502 2020-08-03 00:00:00 \u2506 216           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.hour","title":"<code>hour()</code>","text":""},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.minute","title":"<code>minute()</code>","text":""},{"location":"api-reference/expressions_dt/#narwhals.expression.ExprDateTimeNamespace.second","title":"<code>second()</code>","text":""},{"location":"api-reference/expressions_str/","title":"<code>narwhals.Expr.str</code>","text":""},{"location":"api-reference/expressions_str/#narwhals.expression.ExprStringNamespace.ends_with","title":"<code>ends_with(suffix)</code>","text":""},{"location":"api-reference/expressions_str/#narwhals.expression.ExprStringNamespace.head","title":"<code>head(n=5)</code>","text":"<p>Take the first n elements of each string.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of elements to take.</p> <code>5</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {'lyrics': ['Atatata', 'taata', 'taatatata', 'zukkyun']}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.DataFrame(data)\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.with_columns(lyrics_head = nw.col('lyrics').str.head())\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n      lyrics lyrics_head\n0    Atatata       Atata\n1      taata       taata\n2  taatatata       taata\n3    zukkyun       zukky\n&gt;&gt;&gt; func(df_pl)\nshape: (4, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 lyrics    \u2506 lyrics_head \u2502\n\u2502 ---       \u2506 ---         \u2502\n\u2502 str       \u2506 str         \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 Atatata   \u2506 Atata       \u2502\n\u2502 taata     \u2506 taata       \u2502\n\u2502 taatatata \u2506 taata       \u2502\n\u2502 zukkyun   \u2506 zukky       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/expressions_str/#narwhals.expression.ExprStringNamespace.to_datetime","title":"<code>to_datetime(format)</code>","text":"<p>Convert to Datetime dtype.</p> Notes <p>pandas defaults to nanosecond time unit, Polars to microsecond. Prior to pandas 2.0, nanoseconds were the only time unit supported in pandas, with no ability to set any other one. The ability to set the time unit in pandas, if the version permits, will arrive.</p> <p>Parameters:</p> Name Type Description Default <code>format</code> <code>str</code> <p>Format to parse strings with. Must be passed, as different     dataframe libraries have different ways of auto-inferring     formats.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; df_pd = pd.DataFrame({'a': ['2020-01-01', '2020-01-02']})\n&gt;&gt;&gt; df_pl = pl.DataFrame({'a': ['2020-01-01', '2020-01-02']})\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.select(nw.col('a').str.to_datetime(format='%Y-%m-%d'))\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n           a\n0 2020-01-01\n1 2020-01-02\n&gt;&gt;&gt; func(df_pl)\nshape: (2, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a                   \u2502\n\u2502 ---                 \u2502\n\u2502 datetime[\u03bcs]        \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2020-01-01 00:00:00 \u2502\n\u2502 2020-01-02 00:00:00 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/","title":"<code>narwhals.LazyFrame</code>","text":"<p>Representation of a Lazy computation graph/query against a DataFrame.</p> <p>This allows for whole-query optimisation in addition to parallelism, and is the preferred (and highest-performance) mode of operation for narwhals.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>Any</code> <p>A pandas-like dataframe (Pandas, cuDF or Modin), a Polars dataframe,  a Polars lazyframe, a narwhals DataFrame or a narwhals LazyFrame.</p> required <code>is_polars</code> <code>bool</code> <p>if set to <code>True</code>, assume the dataframe to be of Polars type.</p> <code>False</code> Note <p>Initialising <code>LazyFrame(...)</code> directly is equivalent to <code>DataFrame(...).lazy()</code>.</p> <p>Examples:</p> <p>Constructing a LazyFrame directly from a dictionary:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {\"a\": [1, 2], \"b\": [3, 4]}\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(data)\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; dframe = lf.collect()\n&gt;&gt;&gt; dframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(dframe)\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 3   \u2502\n\u2502 2   \u2506 4   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.columns","title":"<code>columns: list[str]</code>  <code>property</code>","text":"<p>Get column names.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... ).select(\"foo\", \"bar\")\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lf.columns\n['foo', 'bar']\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.schema","title":"<code>schema: dict[str, DType]</code>  <code>property</code>","text":"<p>Get a dict[column name, DType].</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lf.schema\nOrderedDict({'foo': Int64, 'bar': Float64, 'ham': String})\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.collect","title":"<code>collect()</code>","text":"<p>Materialize this LazyFrame into a DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>DataFrame</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"a\": [\"a\", \"b\", \"a\", \"b\", \"b\", \"c\"],\n...         \"b\": [1, 2, 3, 4, 5, 6],\n...         \"c\": [6, 5, 4, 3, 2, 1],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lf\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals LazyFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; df = lf.group_by(\"a\").agg(nw.all().sum()).collect()\n&gt;&gt;&gt; df\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(df).sort(\"a\")\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 c   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 4   \u2506 10  \u2502\n\u2502 b   \u2506 11  \u2506 10  \u2502\n\u2502 c   \u2506 6   \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.drop","title":"<code>drop(*columns)</code>","text":"<p>Remove columns from the LazyFrame.</p> <p>Parameters:</p> Name Type Description Default <code>*columns</code> <code>str | Iterable[str]</code> <p>Names of the columns that should be removed from the       dataframe. Accepts column selector input.</p> <code>()</code> <p>Examples:</p> <p>Drop a single column by passing the name of that column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.drop(\"ham\").collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6.0 \u2502\n\u2502 2   \u2506 7.0 \u2502\n\u2502 3   \u2506 8.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Use positional arguments to drop multiple columns.</p> <pre><code>&gt;&gt;&gt; lframe = lf.drop(\"foo\", \"ham\").collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 bar \u2502\n\u2502 --- \u2502\n\u2502 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 6.0 \u2502\n\u2502 7.0 \u2502\n\u2502 8.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.drop_nulls","title":"<code>drop_nulls()</code>","text":"<p>Drop null values.</p> Notes <p>pandas and Polars handle null values differently. Polars distinguishes between NaN and Null, whereas pandas doesn't.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {'a': [1., 2., None], 'ba': [1, None, 2.]}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.LazyFrame(data)\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.drop_nulls()\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n     a   ba\n0  1.0  1.0\n&gt;&gt;&gt; func(df_pl).collect()\nshape: (1, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 ba  \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 f64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1.0 \u2506 1.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.filter","title":"<code>filter(*predicates)</code>","text":"<p>Filter the rows in the LazyFrame based on a predicate expression.</p> <p>The original order of the remaining rows is preserved.</p> <p>Parameters:</p> Name Type Description Default <code>*predicates</code> <code>IntoExpr | Iterable[IntoExpr]</code> <p>Expression that evaluates to a boolean Series.</p> <code>()</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n</code></pre> <p>Filter on one condition:</p> <pre><code>&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.filter(nw.col(\"foo\") &gt; 1).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2   \u2506 7   \u2506 b   \u2502\n\u2502 3   \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Filter on multiple conditions:</p> <pre><code>&gt;&gt;&gt; lframe = lf.filter((nw.col(\"foo\") &lt; 3) &amp; (nw.col(\"ham\") == \"a\")).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Provide multiple filters using <code>*args</code> syntax:</p> <pre><code>&gt;&gt;&gt; lframe = lf.filter(\n...     nw.col(\"foo\") == 1,\n...     nw.col(\"ham\") == \"a\",\n... ).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Filter on an OR condition:</p> <pre><code>&gt;&gt;&gt; lframe = lf.filter((nw.col(\"foo\") == 1) | (nw.col(\"ham\") == \"c\")).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (2, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2506 a   \u2502\n\u2502 3   \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.group_by","title":"<code>group_by(*keys)</code>","text":"<p>Start a group by operation.</p> <p>Parameters:</p> Name Type Description Default <code>*keys</code> <code>str | Iterable[str]</code> <p>Column(s) to group by. Accepts expression input. Strings are parsed as column names.</p> <code>()</code> <p>Examples:</p> <p>Group by one column and call <code>agg</code> to compute the grouped sum of another column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"a\": [\"a\", \"b\", \"a\", \"b\", \"c\"],\n...         \"b\": [1, 2, 1, 3, 3],\n...         \"c\": [5, 4, 3, 2, 1],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.group_by(\"a\").agg(nw.col(\"b\").sum()).collect().sort(\"a\")\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 2   \u2502\n\u2502 b   \u2506 5   \u2502\n\u2502 c   \u2506 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Group by multiple columns by passing a list of column names.</p> <pre><code>&gt;&gt;&gt; lframe = lf.group_by([\"a\", \"b\"]).agg(nw.max(\"c\")).collect().sort([\"a\", \"b\"])\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (4, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 c   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 str \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 a   \u2506 1   \u2506 5   \u2502\n\u2502 b   \u2506 2   \u2506 4   \u2502\n\u2502 b   \u2506 3   \u2506 2   \u2502\n\u2502 c   \u2506 3   \u2506 1   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.head","title":"<code>head(n)</code>","text":"<p>Get the first <code>n</code> rows.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of rows to return.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"a\": [1, 2, 3, 4, 5, 6],\n...         \"b\": [7, 8, 9, 10, 11, 12],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.head(5).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (5, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 7   \u2502\n\u2502 2   \u2506 8   \u2502\n\u2502 3   \u2506 9   \u2502\n\u2502 4   \u2506 10  \u2502\n\u2502 5   \u2506 11  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; lframe = lf.head(2).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 7   \u2502\n\u2502 2   \u2506 8   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.join","title":"<code>join(other, *, how='inner', left_on, right_on)</code>","text":"<p>Add a join operation to the Logical Plan.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>Self</code> <p>Lazy DataFrame to join with.</p> required <code>how</code> <code>Literal['inner']</code> <p>{'inner'}   Join strategy.</p> <ul> <li>inner: Returns rows that have matching values in both               tables</li> </ul> <code>'inner'</code> <code>left_on</code> <code>str | list[str]</code> <p>Join column of the left DataFrame.</p> required <code>right_on</code> <code>str | list[str]</code> <p>Join column of the right DataFrame.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>A new joined LazyFrame</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6.0, 7.0, 8.0],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; other_lf_pl = pl.LazyFrame(\n...     {\n...         \"apple\": [\"x\", \"y\", \"z\"],\n...         \"ham\": [\"a\", \"b\", \"d\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; other_lf = nw.LazyFrame(other_lf_pl)\n&gt;&gt;&gt; lframe = lf.join(other_lf, left_on=\"ham\", right_on=\"ham\").collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (2, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2506 apple \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2506 ---   \u2502\n\u2502 i64 \u2506 f64 \u2506 str \u2506 str   \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6.0 \u2506 a   \u2506 x     \u2502\n\u2502 2   \u2506 7.0 \u2506 b   \u2506 y     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.pipe","title":"<code>pipe(function, *args, **kwargs)</code>","text":"<p>Pipe function call.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = {'a': [1,2,3], 'ba': [4,5,6]}\n&gt;&gt;&gt; df_pd = pd.DataFrame(data)\n&gt;&gt;&gt; df_pl = pl.LazyFrame(data)\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(df_any):\n...     df = nw.from_native(df_any)\n...     df = df.pipe(lambda _df: _df.select([x for x in _df.columns if len(x) == 1]))\n...     return nw.to_native(df)\n</code></pre> <p>We can then pass either pandas or Polars:</p> <pre><code>&gt;&gt;&gt; func(df_pd)\n   a\n0  1\n1  2\n2  3\n&gt;&gt;&gt; func(df_pl).collect()\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 2   \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.rename","title":"<code>rename(mapping)</code>","text":"<p>Rename column names.</p> <p>Parameters:</p> Name Type Description Default <code>mapping</code> <code>dict[str, str]</code> <p>Key value pairs that map from old name to new name, or a       function that takes the old name as input and returns the       new name.</p> required Notes <p>If existing names are swapped (e.g. 'A' points to 'B' and 'B'  points to 'A'), polars will block projection and predicate  pushdowns at this node.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.rename({\"foo\": \"apple\"}).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 apple \u2506 bar \u2506 ham \u2502\n\u2502 ---   \u2506 --- \u2506 --- \u2502\n\u2502 i64   \u2506 i64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1     \u2506 6   \u2506 a   \u2502\n\u2502 2     \u2506 7   \u2506 b   \u2502\n\u2502 3     \u2506 8   \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.select","title":"<code>select(*exprs, **named_exprs)</code>","text":"<p>Select columns from this LazyFrame.</p> <p>Parameters:</p> Name Type Description Default <code>*exprs</code> <code>IntoExpr | Iterable[IntoExpr]</code> <p>Column(s) to select, specified as positional arguments.      Accepts expression input. Strings are parsed as column names,      other non-expression inputs are parsed as literals.</p> <code>()</code> <code>**named_exprs</code> <code>IntoExpr</code> <p>Additional columns to select, specified as keyword arguments.             The columns will be renamed to the keyword used.</p> <code>{}</code> <p>Examples:</p> <p>Pass the name of a column to select that column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3],\n...         \"bar\": [6, 7, 8],\n...         \"ham\": [\"a\", \"b\", \"c\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.select(\"foo\").collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2502\n\u2502 --- \u2502\n\u2502 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2502\n\u2502 2   \u2502\n\u2502 3   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Multiple columns can be selected by passing a list of column names.</p> <pre><code>&gt;&gt;&gt; lframe = lf.select([\"foo\", \"bar\"]).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 6   \u2502\n\u2502 2   \u2506 7   \u2502\n\u2502 3   \u2506 8   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Multiple columns can also be selected using positional arguments instead of a list. Expressions are also accepted.</p> <pre><code>&gt;&gt;&gt; lframe = lf.select(nw.col(\"foo\"), nw.col(\"bar\") + 1).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 7   \u2502\n\u2502 2   \u2506 8   \u2502\n\u2502 3   \u2506 9   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Use keyword arguments to easily name your expression inputs.</p> <pre><code>&gt;&gt;&gt; lframe = lf.select(threshold=nw.col('foo')*2).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 1)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 threshold \u2502\n\u2502 ---       \u2502\n\u2502 i64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2         \u2502\n\u2502 4         \u2502\n\u2502 6         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.sort","title":"<code>sort(by, *more_by, descending=False)</code>","text":"<p>Sort the LazyFrame by the given columns.</p> <p>Parameters:</p> Name Type Description Default <code>by</code> <code>str | Iterable[str]</code> <p>Column(s) to sort by. Accepts expression input. Strings are  parsed as column names.</p> required <code>*more_by</code> <code>str</code> <p>Additional columns to sort by, specified as positional        arguments.</p> <code>()</code> <code>descending</code> <code>bool | Sequence[bool]</code> <p>Sort in descending order. When sorting by multiple          columns, can be specified per column by passing a          sequence of booleans.</p> <code>False</code> <p>Examples:</p> <p>Pass a single column name to sort by that column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"a\": [1, 2, None],\n...         \"b\": [6.0, 5.0, 4.0],\n...         \"c\": [\"a\", \"c\", \"b\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.sort(\"a\").collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 f64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 null \u2506 4.0 \u2506 b   \u2502\n\u2502 1    \u2506 6.0 \u2506 a   \u2502\n\u2502 2    \u2506 5.0 \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Sort by multiple columns by passing a list of columns.</p> <pre><code>&gt;&gt;&gt; lframe = lf.sort([\"c\", \"a\"], descending=True).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 f64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 2    \u2506 5.0 \u2506 c   \u2502\n\u2502 null \u2506 4.0 \u2506 b   \u2502\n\u2502 1    \u2506 6.0 \u2506 a   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Or use positional arguments to sort by multiple columns in the same way.</p> <pre><code>&gt;&gt;&gt; lframe = lf.sort(\"c\", \"a\", descending=[False, True]).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b   \u2506 c   \u2502\n\u2502 ---  \u2506 --- \u2506 --- \u2502\n\u2502 i64  \u2506 f64 \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1    \u2506 6.0 \u2506 a   \u2502\n\u2502 null \u2506 4.0 \u2506 b   \u2502\n\u2502 2    \u2506 5.0 \u2506 c   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.unique","title":"<code>unique(subset)</code>","text":"<p>Drop duplicate rows from this LazyFrame.</p> <p>Parameters:</p> Name Type Description Default <code>subset</code> <code>str | list[str]</code> <p>Column name(s) to consider when identifying duplicate rows.      If set to <code>None</code>, use all columns.</p> required <p>Returns:</p> Name Type Description <code>LazyFrame</code> <code>Self</code> <p>LazyFrame with unique rows.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"foo\": [1, 2, 3, 1],\n...         \"bar\": [\"a\", \"a\", \"a\", \"a\"],\n...         \"ham\": [\"b\", \"b\", \"b\", \"b\"],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.unique(None).collect().sort(\"foo\")\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 str \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 a   \u2506 b   \u2502\n\u2502 2   \u2506 a   \u2506 b   \u2502\n\u2502 3   \u2506 a   \u2506 b   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; lframe = lf.unique(subset=[\"bar\", \"ham\"]).collect().sort(\"foo\")\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 foo \u2506 bar \u2506 ham \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 str \u2506 str \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 a   \u2506 b   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/lazyframe/#narwhals.dataframe.LazyFrame.with_columns","title":"<code>with_columns(*exprs, **named_exprs)</code>","text":"<p>Add columns to this LazyFrame.</p> <p>Added columns will replace existing columns with the same name.</p> <p>Parameters:</p> Name Type Description Default <code>*exprs</code> <code>IntoExpr | Iterable[IntoExpr]</code> <p>Column(s) to add, specified as positional arguments.      Accepts expression input. Strings are parsed as column names, other      non-expression inputs are parsed as literals.</p> <code>()</code> <code>**named_exprs</code> <code>IntoExpr</code> <p>Additional columns to add, specified as keyword arguments.             The columns will be renamed to the keyword used.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>LazyFrame</code> <code>Self</code> <p>A new LazyFrame with the columns added.</p> Note <p>Creating a new LazyFrame using this method does not create a new copy of existing data.</p> <p>Examples:</p> <p>Pass an expression to add it as a new column.</p> <pre><code>&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lf_pl = pl.LazyFrame(\n...     {\n...         \"a\": [1, 2, 3, 4],\n...         \"b\": [0.5, 4, 10, 13],\n...         \"c\": [True, True, False, True],\n...     }\n... )\n&gt;&gt;&gt; lf = nw.LazyFrame(lf_pl)\n&gt;&gt;&gt; lframe = lf.with_columns((nw.col(\"a\") * 2).alias(\"2a\")).collect()\n&gt;&gt;&gt; lframe\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n| Narwhals DataFrame                            |\n| Use `narwhals.to_native` to see native output |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n&gt;&gt;&gt; nw.to_native(lframe)\nshape: (4, 4)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b    \u2506 c     \u2506 2a  \u2502\n\u2502 --- \u2506 ---  \u2506 ---   \u2506 --- \u2502\n\u2502 i64 \u2506 f64  \u2506 bool  \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 0.5  \u2506 true  \u2506 2   \u2502\n\u2502 2   \u2506 4.0  \u2506 true  \u2506 4   \u2502\n\u2502 3   \u2506 10.0 \u2506 false \u2506 6   \u2502\n\u2502 4   \u2506 13.0 \u2506 true  \u2506 8   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"api-reference/narwhals/","title":"<code>narwhals</code>","text":"<p>Here are the top-level functions available in Narwhals.</p>"},{"location":"api-reference/narwhals/#narwhals.all","title":"<code>all()</code>","text":"<p>Instantiate an expression representing all columns, similar to <code>polars.all</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.col","title":"<code>col(*names)</code>","text":"<p>Instantiate an expression, similar to <code>polars.col</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.concat","title":"<code>concat(items, *, how='vertical')</code>","text":""},{"location":"api-reference/narwhals/#narwhals.from_native","title":"<code>from_native(native_dataframe, *, strict=True, eager_only=None, series_only=None, allow_series=None)</code>","text":"<p>Convert dataframe to Narwhals DataFrame, LazyFrame, or Series.</p> <p>Parameters:</p> Name Type Description Default <code>native_dataframe</code> <code>Any</code> <p>Raw dataframe from user. Depending on the other arguments, input object can be:</p> <ul> <li>pandas.DataFrame</li> <li>polars.DataFrame</li> <li>polars.LazyFrame</li> <li>anything with a <code>__narwhals_dataframe__</code> or <code>__narwhals_lazyframe__</code> method</li> <li>pandas.Series</li> <li>polars.Series</li> <li>anything with a <code>__narwhals_series__</code> method</li> </ul> required <code>strict</code> <code>bool</code> <p>Whether to raise if object can't be converted (default) or to just leave it as-is.</p> <code>True</code> <code>eager_only</code> <code>bool | None</code> <p>Whether to only allow eager objects.</p> <code>None</code> <code>series_only</code> <code>bool | None</code> <p>Whether to only allow series.</p> <code>None</code> <code>allow_series</code> <code>bool | None</code> <p>Whether to allow series (default is only dataframe / lazyframe).</p> <code>None</code> <p>Returns:</p> Type Description <code>DataFrame | LazyFrame | Series</code> <p>narwhals.DataFrame or narwhals.LazyFrame or narwhals.Series</p>"},{"location":"api-reference/narwhals/#narwhals.len","title":"<code>len()</code>","text":"<p>Instantiate an expression representing the length of a dataframe, similar to <code>polars.len</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.max","title":"<code>max(*columns)</code>","text":"<p>Instantiate an expression representing the maximum of one or more columns, similar to <code>polars.max</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.mean","title":"<code>mean(*columns)</code>","text":"<p>Instantiate an expression representing the mean of one or more columns, similar to <code>polars.mean</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.min","title":"<code>min(*columns)</code>","text":"<p>Instantiate an expression representing the minimum of one or more columns, similar to <code>polars.min</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.sum","title":"<code>sum(*columns)</code>","text":"<p>Instantiate an expression representing the sum of one or more columns, similar to <code>polars.sum</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.sum_horizontal","title":"<code>sum_horizontal(*exprs)</code>","text":"<p>Instantiate an expression representing the horizontal sum of one or more expressions, similar to <code>polars.sum_horizontal</code>.</p>"},{"location":"api-reference/narwhals/#narwhals.to_native","title":"<code>to_native(narwhals_object, *, strict=True)</code>","text":"<p>Convert Narwhals object to native one.</p> <p>Parameters:</p> Name Type Description Default <code>narwhals_object</code> <code>LazyFrame | DataFrame | Series</code> <p>Narwhals object.</p> required <code>strict</code> <code>bool</code> <p>whether to raise on non-Narwhals input.</p> <code>True</code> <p>Returns:</p> Type Description <code>Any</code> <p>Object of class that user started with.</p>"},{"location":"api-reference/series/","title":"<code>narwhals.Series</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.dtype","title":"<code>dtype: Any</code>  <code>property</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.name","title":"<code>name: str</code>  <code>property</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.shape","title":"<code>shape: tuple[int]</code>  <code>property</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.alias","title":"<code>alias(name)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.all","title":"<code>all()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.any","title":"<code>any()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.cast","title":"<code>cast(dtype)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.cum_sum","title":"<code>cum_sum()</code>","text":"<p>Calculate the cumulative sum.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s = [2, 4, 3]\n&gt;&gt;&gt; s_pd = pd.Series(s)\n&gt;&gt;&gt; s_pl = pl.Series(s)\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     s = s.cum_sum()\n...     return nw.to_native(s)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0    2\n1    6\n2    9\ndtype: int64\n&gt;&gt;&gt; func(s_pl)\nshape: (3,)\nSeries: '' [i64]\n[\n   2\n   6\n   9\n]\n</code></pre>"},{"location":"api-reference/series/#narwhals.series.Series.diff","title":"<code>diff()</code>","text":"<p>Calculate the difference with the previous element, for each element.</p> Notes <p>pandas may change the dtype here, for example when introducing missing values in an integer column. To ensure, that the dtype doesn't change, you may want to use <code>fill_null</code> and <code>cast</code>. For example, to calculate the diff and fill missing values with <code>0</code> in a Int64 column, you could do:</p> <pre><code>s.diff().fill_null(0).cast(nw.Int64)\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s = [2, 4, 3]\n&gt;&gt;&gt; s_pd = pd.Series(s)\n&gt;&gt;&gt; s_pl = pl.Series(s)\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     s = s.diff()\n...     return nw.to_native(s)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0    NaN\n1    2.0\n2   -1.0\ndtype: float64\n&gt;&gt;&gt; func(s_pl)\nshape: (3,)\nSeries: '' [i64]\n[\n   null\n   2\n   -1\n]\n</code></pre>"},{"location":"api-reference/series/#narwhals.series.Series.drop_nulls","title":"<code>drop_nulls()</code>","text":"<p>Drop all null values.</p> See Also <p>drop_nans</p> Notes <p>A null value is not the same as a NaN value. To drop NaN values, use :func:<code>drop_nans</code>.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s_pd = pd.Series([2, 4, None, 3, 5])\n&gt;&gt;&gt; s_pl = pl.Series('a', [2, 4, None, 3, 5])\n</code></pre> <p>Now define a dataframe-agnostic function with a <code>column</code> argument for the column to evaluate :</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...   s = nw.from_native(s_any, series_only=True)\n...   s = s.drop_nulls()\n...   return nw.to_native(s)\n</code></pre> <p>Then we can pass either Series (polars or pandas) to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0    2.0\n1    4.0\n3    3.0\n4    5.0\ndtype: float64\n&gt;&gt;&gt; func(s_pl)\nshape: (4,)\nSeries: 'a' [i64]\n[\n   2\n   4\n   3\n   5\n]\n</code></pre>"},{"location":"api-reference/series/#narwhals.series.Series.fill_null","title":"<code>fill_null(value)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.filter","title":"<code>filter(other)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.is_between","title":"<code>is_between(lower_bound, upper_bound, closed='both')</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.is_in","title":"<code>is_in(other)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.is_null","title":"<code>is_null()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.max","title":"<code>max()</code>","text":"<p>Get the maximum value in this Series.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s = [1, 2, 3]\n&gt;&gt;&gt; s_pd = pd.Series(s)\n&gt;&gt;&gt; s_pl = pl.Series(s)\n</code></pre> <p>We define a library agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     return s.max()\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n3\n&gt;&gt;&gt; func(s_pl)\n3\n</code></pre>"},{"location":"api-reference/series/#narwhals.series.Series.mean","title":"<code>mean()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.min","title":"<code>min()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.n_unique","title":"<code>n_unique()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.sample","title":"<code>sample(n=None, fraction=None, *, with_replacement=False)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.shift","title":"<code>shift(n)</code>","text":"<p>Shift values by <code>n</code> positions.</p> Notes <p>pandas may change the dtype here, for example when introducing missing values in an integer column. To ensure, that the dtype doesn't change, you may want to use <code>fill_null</code> and <code>cast</code>. For example, to shift and fill missing values with <code>0</code> in a Int64 column, you could do:</p> <pre><code>s.shift(1).fill_null(0).cast(nw.Int64)\n</code></pre> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s = [2, 4, 3]\n&gt;&gt;&gt; s_pd = pd.Series(s)\n&gt;&gt;&gt; s_pl = pl.Series(s)\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     s = s.shift(1)\n...     return nw.to_native(s)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0    NaN\n1    2.0\n2    4.0\ndtype: float64\n&gt;&gt;&gt; func(s_pl)\nshape: (3,)\nSeries: '' [i64]\n[\n   null\n   2\n   4\n]\n</code></pre>"},{"location":"api-reference/series/#narwhals.series.Series.sort","title":"<code>sort(*, descending=False)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.std","title":"<code>std(*, ddof=1)</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.sum","title":"<code>sum()</code>","text":"<p>Reduce this Series to the sum value.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s = [1, 2, 3]\n&gt;&gt;&gt; s_pd = pd.Series(s)\n&gt;&gt;&gt; s_pl = pl.Series(s)\n</code></pre> <p>We define a library agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     return s.sum()\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n6\n&gt;&gt;&gt; func(s_pl)\n6\n</code></pre>"},{"location":"api-reference/series/#narwhals.series.Series.to_numpy","title":"<code>to_numpy()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.to_pandas","title":"<code>to_pandas()</code>","text":""},{"location":"api-reference/series/#narwhals.series.Series.unique","title":"<code>unique()</code>","text":"<p>Returns unique values</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; s = [2, 4, 4, 6]\n&gt;&gt;&gt; s_pd = pd.Series(s)\n&gt;&gt;&gt; s_pl = pl.Series(s)\n</code></pre> <p>Let's define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...    s = nw.from_native(s_any, series_only=True)\n...    s = s.unique()\n...    return nw.to_native(s)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0    2\n1    4\n2    6\ndtype: int64\n&gt;&gt;&gt; func(s_pl)\nshape: (3,)\nSeries: '' [i64]\n[\n   2\n   4\n   6\n]\n</code></pre>"},{"location":"api-reference/series_dt/","title":"<code>narwhals.Series.dt</code>","text":""},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.year","title":"<code>year()</code>","text":""},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.month","title":"<code>month()</code>","text":""},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.day","title":"<code>day()</code>","text":""},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.ordinal_day","title":"<code>ordinal_day()</code>","text":"<p>Get ordinal day.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; from datetime import datetime\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; data = [datetime(2020, 1, 1), datetime(2020, 8, 3)]\n&gt;&gt;&gt; s_pd = pd.Series(data)\n&gt;&gt;&gt; s_pl = pl.Series(data)\n</code></pre> <p>We define a library agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     s = s.dt.ordinal_day()\n...     return nw.to_native(s)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0      1\n1    216\ndtype: int32\n&gt;&gt;&gt; func(s_pl)\nshape: (2,)\nSeries: '' [i16]\n[\n   1\n   216\n]\n</code></pre>"},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.hour","title":"<code>hour()</code>","text":""},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.minute","title":"<code>minute()</code>","text":""},{"location":"api-reference/series_dt/#narwhals.series.SeriesDateTimeNamespace.second","title":"<code>second()</code>","text":""},{"location":"api-reference/series_str/","title":"<code>narwhals.Series.str</code>","text":""},{"location":"api-reference/series_str/#narwhals.series.SeriesStringNamespace.ends_with","title":"<code>ends_with(suffix)</code>","text":""},{"location":"api-reference/series_str/#narwhals.series.SeriesStringNamespace.head","title":"<code>head(n=5)</code>","text":"<p>Take the first n elements of each string.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of elements to take.</p> <code>5</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; import polars as pl\n&gt;&gt;&gt; import narwhals as nw\n&gt;&gt;&gt; lyrics = ['Atatata', 'taata', 'taatatata', 'zukkyun']\n&gt;&gt;&gt; s_pd = pd.Series(lyrics)\n&gt;&gt;&gt; s_pl = pl.Series(lyrics)\n</code></pre> <p>We define a dataframe-agnostic function:</p> <pre><code>&gt;&gt;&gt; def func(s_any):\n...     s = nw.from_native(s_any, series_only=True)\n...     s = s.str.head()\n...     return nw.to_native(s)\n</code></pre> <p>We can then pass either pandas or Polars to <code>func</code>:</p> <pre><code>&gt;&gt;&gt; func(s_pd)\n0    Atata\n1    taata\n2    taata\n3    zukky\ndtype: object\n&gt;&gt;&gt; func(s_pl)\nshape: (4,)\nSeries: '' [str]\n[\n   \"Atata\"\n   \"taata\"\n   \"taata\"\n   \"zukky\"\n]\n</code></pre>"},{"location":"basics/column/","title":"Series","text":"<p>In dataframe, you learned how to write a dataframe-agnostic function.</p> <p>We only used DataFrame methods there - but what if we need to operate on its columns?</p> <p>Note that Polars does not have lazy columns. If you need to operate on columns as part of a dataframe operation, you should use expressions - but if you need to extract a single column, you need to ensure that you start with an eager <code>DataFrame</code>. To do that, you need to pass <code>eager_only=True</code> to <code>nw.from_native</code>.</p>"},{"location":"basics/column/#example-1-filter-based-on-a-columns-values","title":"Example 1: filter based on a column's values","text":"<p>This can stay lazy, so we just use <code>nw.from_native</code> and expressions:</p> <pre><code>import narwhals as nw\n\ndef my_func(df):\n    df_s = nw.from_native(df)\n    df_s = df_s.filter(nw.col('a') &gt; 0)\n    return nw.to_native(df_s)\n</code></pre> pandasPolars (eager)Polars (lazy) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>   a  b\n1  1  5\n2  3 -3\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 5   \u2502\n\u2502 3   \u2506 -3  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.LazyFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df).collect())\n</code></pre> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 5   \u2502\n\u2502 3   \u2506 -3  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p>"},{"location":"basics/column/#example-2-multiply-a-columns-values-by-a-constant","title":"Example 2: multiply a column's values by a constant","text":"<p>Let's write a dataframe-agnostic function which multiplies the values in column <code>'a'</code> by 2. This can also stay lazy, and can use expressions:</p> <pre><code>import narwhals as nw\n\ndef my_func(df):\n    df_s = nw.from_native(df)\n    df_s = df_s.with_columns(nw.col('a')*2)\n    return nw.to_native(df_s)\n</code></pre> pandasPolars (eager)Polars (lazy) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>   a  b\n0 -2  3\n1  2  5\n2  6 -3\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 -2  \u2506 3   \u2502\n\u2502 2   \u2506 5   \u2502\n\u2502 6   \u2506 -3  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.LazyFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df).collect())\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 -2  \u2506 3   \u2502\n\u2502 2   \u2506 5   \u2502\n\u2502 6   \u2506 -3  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p>Note that column <code>'a'</code> was overwritten. If we had wanted to add a new column called <code>'c'</code> containing column <code>'a'</code>'s values multiplied by 2, we could have used <code>Expr.alias</code>:</p> <pre><code>import narwhals as nw\n\ndef my_func(df):\n    df_s = nw.from_native(df)\n    df_s = df_s.with_columns((nw.col('a')*2).alias('c'))\n    return nw.to_native(df_s)\n</code></pre> pandasPolars (eager)Polars (lazy) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>   a  b  c\n0 -1  3 -2\n1  1  5  2\n2  3 -3  6\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 c   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 -1  \u2506 3   \u2506 -2  \u2502\n\u2502 1   \u2506 5   \u2506 2   \u2502\n\u2502 3   \u2506 -3  \u2506 6   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.LazyFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df).collect())\n</code></pre> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 c   \u2502\n\u2502 --- \u2506 --- \u2506 --- \u2502\n\u2502 i64 \u2506 i64 \u2506 i64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 -1  \u2506 3   \u2506 -2  \u2502\n\u2502 1   \u2506 5   \u2506 2   \u2502\n\u2502 3   \u2506 -3  \u2506 6   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p>"},{"location":"basics/column/#example-3-finding-the-mean-of-a-column-as-a-scalar","title":"Example 3: finding the mean of a column as a scalar","text":"<p>Now, we want to find the mean of column <code>'a'</code>, and we need it as a Python scalar. This means that computation cannot stay lazy - it must execute! Therefore, we'll pass <code>eager_only=True</code> to <code>nw.from_native</code>, and then, instead of using expressions, we'll extract a <code>Series</code>.</p> <pre><code>import narwhals as nw\n\ndef my_func(df):\n    df_s = nw.from_native(df, eager_only=True)\n    return df_s['a'].mean()\n</code></pre> pandasPolars (eager) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>1.0\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [-1, 1, 3], 'b': [3, 5, -3]})\nprint(my_func(df))\n</code></pre> <pre><code>1.0\n</code></pre> </p>"},{"location":"basics/complete_example/","title":"Complete example","text":"<p>We're going to write a dataframe-agnostic \"Standard Scaler\". This class will have <code>fit</code> and <code>transform</code> methods (like <code>scikit-learn</code> transformers), and will work agnostically for pandas and Polars.</p> <p>We'll need to write two methods:</p> <ul> <li><code>fit</code>: find the mean and standard deviation for each column from a given training set;</li> <li><code>transform</code>: scale a given dataset with the mean and standard deviations calculated   during <code>fit</code>.</li> </ul> <p>The <code>fit</code> method is a bit complicated, so let's start with <code>transform</code>. Suppose we've already calculated the mean and standard deviation of each column, and have stored them in attributes <code>self.means</code> and <code>self.std_devs</code>.</p>"},{"location":"basics/complete_example/#transform-method","title":"Transform method","text":"<p>The general strategy will be:</p> <ol> <li> <p>Initialise a Narwhals DataFrame or LazyFrame by passing your dataframe to <code>nw.from_native</code>.</p> <p>Note: if you need eager execution, make sure to pass <code>eager_only=True</code> to <code>nw.from_native</code>.</p> </li> <li> <p>Express your logic using the subset of the Polars API supported by Narwhals.</p> </li> <li>If you need to return a dataframe to the user in its original library, call <code>nw.to_native</code>.</li> </ol> <pre><code>import narwhals as nw\n\nclass StandardScalar:\n    def transform(self, df):\n        df = nw.from_native(df)\n        df = df.with_columns(\n            (nw.col(col) - self._means[col]) / self._std_devs[col]\n            for col in df.columns\n        )\n        return nw.to_native(df)\n</code></pre> <p>Note that all the calculations here can stay lazy if the underlying library permits it.</p>"},{"location":"basics/complete_example/#fit-method","title":"Fit method","text":"<p>Unlike the <code>transform</code> method, <code>fit</code> cannot stay lazy, as we need to compute concrete values for the means and standard deviations.</p> <p>To be able to get <code>Series</code> out of our <code>DataFrame</code>, we'll pass <code>eager_only=True</code> to <code>narwhals.from_native</code>. This is because Polars doesn't have a concept of lazy <code>Series</code>, and so Narwhals doesn't either.</p> <pre><code>import narwhals as nw\n\nclass StandardScalar:\n    def fit(self, df):\n        df = nw.from_native(df, eager_only=True)\n        self._means = {col: df[col].mean() for col in df.columns}\n        self._std_devs = {col: df[col].std() for col in df.columns}\n</code></pre>"},{"location":"basics/complete_example/#putting-it-all-together","title":"Putting it all together","text":"<p>Here is our dataframe-agnostic standard scaler: <pre><code>import narwhals as nw\n\nclass StandardScaler:\n    def fit(self, df):\n        df = nw.from_native(df, eager_only=True)\n        self._means = {col: df[col].mean() for col in df.columns}\n        self._std_devs = {col: df[col].std() for col in df.columns}\n\n    def transform(self, df):\n        df = nw.from_native(df)\n        df = df.with_columns(\n            (nw.col(col) - self._means[col]) / self._std_devs[col]\n            for col in df.columns\n        )\n        return nw.to_native(df)\n</code></pre></p> <p>Next, let's try running it. Notice how, as <code>transform</code> doesn't use any eager-only features, so we can pass a Polars LazyFrame to it and have it stay lazy!</p> pandasPolars <p><pre><code>import pandas as pd\n\ndf_train = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 7]})\ndf_test = pd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 7]})\nscaler = StandardScaler()\nscaler.fit(df_train)\nprint(scaler.transform(df_test))\n</code></pre> <pre><code>     a         b\n0 -1.0 -0.872872\n1  0.0 -0.218218\n2  1.0  1.091089\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf_train = pl.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 7]})\ndf_test = pl.LazyFrame({'a': [1, 2, 3], 'b': [4, 5, 7]})\nscaler = StandardScaler()\nscaler.fit(df_train)\nprint(scaler.transform(df_test).collect())\n</code></pre> <pre><code>shape: (3, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a    \u2506 b         \u2502\n\u2502 ---  \u2506 ---       \u2502\n\u2502 f64  \u2506 f64       \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 -1.0 \u2506 -0.872872 \u2502\n\u2502 0.0  \u2506 -0.218218 \u2502\n\u2502 1.0  \u2506 1.091089  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p>"},{"location":"basics/dataframe/","title":"DataFrame","text":"<p>To write a dataframe-agnostic function, the steps you'll want to follow are:</p> <ol> <li> <p>Initialise a Narwhals DataFrame or LazyFrame by passing your dataframe to <code>nw.from_native</code>.     All the calculations stay lazy if we start with a lazy dataframe - Narwhals will never automatically trigger computation without you asking it to.</p> <p>Note: if you need eager execution, make sure to pass <code>eager_only=True</code> to <code>nw.from_native</code>.</p> </li> <li> <p>Express your logic using the subset of the Polars API supported by Narwhals.</p> </li> <li>If you need to return a dataframe to the user in its original library, call <code>nw.to_native</code>.</li> </ol> <p>Let's try writing a simple example.</p>"},{"location":"basics/dataframe/#example-1-descriptive-statistics","title":"Example 1: descriptive statistics","text":"<p>Just like in Polars, we can pass expressions to <code>DataFrame.select</code> or <code>LazyFrame.select</code>.</p> <p>Make a Python file with the following content: <pre><code>import narwhals as nw\n\ndef func(df_any):\n    # 1. Create a Narwhals dataframe\n    df = nw.from_native(df_any)\n    # 2. Use the subset of the Polars API supported by Narwhals\n    df = df.select(\n        a_sum=nw.col('a').sum(),\n        a_mean=nw.col('a').mean(),\n        a_std=nw.col('a').std(),\n    )\n    # 3. Return a library from the user's original library\n    return nw.to_native(df)\n</code></pre> Let's try it out:</p> pandasPolars (eager)Polars (lazy) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [1, 1, 2]})\nprint(func(df))\n</code></pre> <pre><code>   a_sum    a_mean    a_std\n0      4  1.333333  0.57735\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [1, 1, 2]})\nprint(func(df))\n</code></pre> <pre><code>shape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a_sum \u2506 a_mean   \u2506 a_std   \u2502\n\u2502 ---   \u2506 ---      \u2506 ---     \u2502\n\u2502 i64   \u2506 f64      \u2506 f64     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 4     \u2506 1.333333 \u2506 0.57735 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.LazyFrame({'a': [1, 1, 2]})\nprint(func(df).collect())\n</code></pre> <pre><code>shape: (1, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a_sum \u2506 a_mean   \u2506 a_std   \u2502\n\u2502 ---   \u2506 ---      \u2506 ---     \u2502\n\u2502 i64   \u2506 f64      \u2506 f64     \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 4     \u2506 1.333333 \u2506 0.57735 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p>"},{"location":"basics/dataframe/#example-2-group-by-and-mean","title":"Example 2: group-by and mean","text":"<p>Make a Python file with the following content: <pre><code>import narwhals as nw\n\ndef func(df_any):\n    # 1. Create a Narwhals dataframe\n    df = nw.from_native(df_any)\n    # 2. Use the subset of the Polars API supported by Narwhals\n    df = df.group_by('a').agg(nw.col('b').mean()).sort('a')\n    # 3. Return a library from the user's original library\n    return nw.to_native(df)\n</code></pre> Let's try it out:</p> pandasPolars (eager)Polars (lazy) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [1, 1, 2], 'b': [4, 5, 6]})\nprint(func(df))\n</code></pre> <pre><code>   a    b\n0  1  4.5\n1  2  6.0\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [1, 1, 2], 'b': [4, 5, 6]})\nprint(func(df))\n</code></pre> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 4.5 \u2502\n\u2502 2   \u2506 6.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.LazyFrame({'a': [1, 1, 2], 'b': [4, 5, 6]})\nprint(func(df).collect())\n</code></pre> <pre><code>shape: (2, 2)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2502\n\u2502 --- \u2506 --- \u2502\n\u2502 i64 \u2506 f64 \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 4.5 \u2502\n\u2502 2   \u2506 6.0 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p>"},{"location":"basics/dataframe/#example-3-horizontal-sum","title":"Example 3: horizontal sum","text":"<p>Expressions can be free-standing functions which accept other expressions as inputs. For example, we can compute a horizontal sum using <code>nw.sum_horizontal</code>.</p> <p>Make a Python file with the following content: <pre><code>import narwhals as nw\n\ndef func(df_any):\n    # 1. Create a Narwhals dataframe\n    df = nw.from_native(df_any)\n    # 2. Use the subset of the Polars API supported by Narwhals\n    df = df.with_columns(a_plus_b=nw.sum_horizontal('a', 'b'))\n    # 3. Return a library from the user's original library\n    return nw.to_native(df)\n</code></pre> Let's try it out:</p> pandasPolars (eager)Polars (lazy) <p><pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [1, 1, 2], 'b': [4, 5, 6]})\nprint(func(df))\n</code></pre> <pre><code>   a  b  a_plus_b\n0  1  4         5\n1  1  5         6\n2  2  6         8\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.DataFrame({'a': [1, 1, 2], 'b': [4, 5, 6]})\nprint(func(df))\n</code></pre> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 a_plus_b \u2502\n\u2502 --- \u2506 --- \u2506 ---      \u2502\n\u2502 i64 \u2506 i64 \u2506 i64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 4   \u2506 5        \u2502\n\u2502 1   \u2506 5   \u2506 6        \u2502\n\u2502 2   \u2506 6   \u2506 8        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p> <p><pre><code>import polars as pl\n\ndf = pl.LazyFrame({'a': [1, 1, 2], 'b': [4, 5, 6]})\nprint(func(df).collect())\n</code></pre> <pre><code>shape: (3, 3)\n\u250c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 a   \u2506 b   \u2506 a_plus_b \u2502\n\u2502 --- \u2506 --- \u2506 ---      \u2502\n\u2502 i64 \u2506 i64 \u2506 i64      \u2502\n\u255e\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n\u2502 1   \u2506 4   \u2506 5        \u2502\n\u2502 1   \u2506 5   \u2506 6        \u2502\n\u2502 2   \u2506 6   \u2506 8        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> </p>"},{"location":"other/pandas_index/","title":"What about the pandas Index?","text":"<p>There are two types of pandas users:</p> <ul> <li>The ones who make full use of the Index's power.</li> <li>The <code>.reset_index(drop=True)</code> ones, who would rather not think about the Index.</li> </ul> <p>Narwhals aims to accommodate both!</p> <ul> <li>If you'd rather not think about the Index, then don't   worry: it's not part of the Narwhals public API, and you'll never have to worry about   resetting the index or about pandas doing funky index alignment for you.</li> <li>If you want your library to cater to Index powerusers who would be very angry if you reset   their beautiful Index on their behalf, then don't worry: Narwhals makes certain promises   with regards to the Index.</li> </ul> <p>Let's learn about what Narwhals promises.</p>"},{"location":"other/pandas_index/#1-narwhals-will-preserve-your-index-for-dataframe-operations","title":"1. Narwhals will preserve your index for dataframe operations","text":"<pre><code>import narwhals as nw\n\ndef my_func(df_any):\n    df = nw.from_native(df_any)\n    df = df.with_columns(a_plus_one=nw.col('a')+1)\n    return nw.to_native(df)\n</code></pre> <p>Let's start with a dataframe with an Index with values <code>[7, 8, 9]</code>.</p> <pre><code>import pandas as pd\n\ndf = pd.DataFrame({'a': [2, 1, 3], 'b': [3, 5, -3]}, index=[7, 8, 9])\nprint(my_func(df))\n</code></pre> <pre><code>   a  b  a_plus_one\n7  2  3           3\n8  1  5           2\n9  3 -3           4\n</code></pre> <p>Note how the result still has the original index - Narwhals did not modify it.</p>"},{"location":"other/pandas_index/#2-index-alignment-follows-the-left-hand-rule","title":"2. Index alignment follows the left-hand-rule","text":"<p>pandas automatically aligns indices for users. For example:</p> <p><pre><code>import pandas as pd\n\ndf_pd = pd.DataFrame({'a': [2, 1, 3], 'b': [4, 5, 6]})\ns_pd = df_pd['a'].sort_values()\ndf_pd['a_sorted'] = s_pd\n</code></pre> Reading the code, you might expect that <code>'a_sorted'</code> will contain the values <code>[1, 2, 3]</code>.</p> <p>However, here's what actually happens: <pre><code>print(df_pd)\n</code></pre> <pre><code>   a  b  a_sorted\n0  2  4         2\n1  1  5         1\n2  3  6         3\n</code></pre>  In other words, pandas' index alignment undid the <code>sort_values</code> operation!</p> <p>Narwhals, on the other hand, preserves the index of the left-hand-side argument. Everything else will be inserted positionally, just like Polars would do:</p> <pre><code>import narwhals as nw\n\ndf = nw.from_native(df_pd)\ns = nw.from_native(s_pd, allow_series=True)\ndf = df.with_columns(a_sorted=s.sort())\nprint(nw.to_native(df))\n</code></pre> <pre><code>   a  b  a_sorted\n0  2  4         1\n1  1  5         2\n2  3  6         3\n</code></pre> <p>If you keep these two rules in mind, then Narwhals will both help you avoid Index-related surprises whilst letting you preserve the Index for the subset of your users who consciously make great use of it.</p>"}]}